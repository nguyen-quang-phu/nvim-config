{
  "Declare Assign ": {
    "prefix": "da",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1|const,let|} ${2:variableName} = $3"
    ],
    "description": "Declare Assign "
  },
  "Export Declare Assign ": {
    "prefix": "eda",
    "scope": "javascript,javascriptreact",
    "body": [
      "export ${1|const,let|} ${2:variableName} = $3"
    ],
    "description": "Export Declare Assign "
  },
  "Declare Assign Const ": {
    "prefix": "dac",
    "scope": "javascript,javascriptreact",
    "body": [
      "const ${1/(^[A-Z][a-z]*|[a-z])([A-Z])?/${1:/upcase}${2:+_}${2:/upcase}/g} = $2;"
    ],
    "description": "Declare Assign Const"
  },
  "Object Destructuring": {
    "prefix": "odes",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1|const,let|} {$3} = $2"
    ],
    "description": "Object Destructuring"
  },
  "Array Destructuring": {
    "prefix": "ades",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1|const,let|} [$3] = $2"
    ],
    "description": "Array Destructuring"
  },
  // Operator
  "Equal": {
    "prefix": "eq",
    "scope": "javascript,javascriptreact",
    "body": [
      "=== "
    ],
    "description": "Equal"
  },
  "Not Equal": {
    "prefix": "neq",
    "scope": "javascript,javascriptreact",
    "body": [
      "!== "
    ],
    "description": "Not Equal"
  },
  "Great Than": {
    "prefix": "gt",
    "scope": "javascript,javascriptreact",
    "body": [
      "> "
    ],
    "description": "Great Than"
  },
  "Great Than Equal": {
    "prefix": "gte",
    "scope": "javascript,javascriptreact",
    "body": [
      ">= "
    ],
    "description": "Great Than Equal"
  },
  "Less Than": {
    "prefix": "lt",
    "scope": "javascript,javascriptreact",
    "body": [
      "< "
    ],
    "description": "Less Than"
  },
  "Less Than Equal": {
    "prefix": "lte",
    "scope": "javascript,javascriptreact",
    "body": [
      "<= "
    ],
    "description": "Less Than Equal"
  },
  "Assignment": {
    "prefix": "as",
    "scope": "javascript,javascriptreact",
    "body": [
      "= "
    ],
    "description": "Assignment"
  },
  "Addition": {
    "prefix": "add",
    "scope": "javascript,javascriptreact",
    "body": [
      "+ "
    ],
    "description": "Addition"
  },
  "Subtraction": {
    "prefix": "sub",
    "scope": "javascript,javascriptreact",
    "body": [
      "- "
    ],
    "description": "Subtraction"
  },
  "Multiplication": {
    "prefix": "mul",
    "scope": "javascript,javascriptreact",
    "body": [
      "* "
    ],
    "description": "Multiplication"
  },
  "Division": {
    "prefix": "sub",
    "scope": "javascript,javascriptreact",
    "body": [
      "/ "
    ],
    "description": "Division"
  },
  "Mod": {
    "prefix": "mod",
    "scope": "javascript,javascriptreact",
    "body": [
      "% "
    ],
    "description": "Mod"
  },
  "Exponentiation": {
    "prefix": "exp",
    "scope": "javascript,javascriptreact",
    "body": [
      "** "
    ],
    "description": "Exponentiation"
  },
  "Increment": {
    "prefix": "inc",
    "scope": "javascript,javascriptreact",
    "body": [
      "++ "
    ],
    "description": "Increment"
  },
  "Decrement": {
    "prefix": "dec",
    "scope": "javascript,javascriptreact",
    "body": [
      "-- "
    ],
    "description": "Decrement"
  },
  "AND": {
    "prefix": "and",
    "scope": "javascript,javascriptreact",
    "body": [
      "& "
    ],
    "description": "AND"
  },
  "OR": {
    "prefix": "or",
    "scope": "javascript,javascriptreact",
    "body": [
      "| "
    ],
    "description": "OR"
  },
  "XOR": {
    "prefix": "xor",
    "scope": "javascript,javascriptreact",
    "body": [
      "^ "
    ],
    "description": "XOR"
  },
  "NOT": {
    "prefix": "not",
    "scope": "javascript,javascriptreact",
    "body": [
      "~ "
    ],
    "description": "NOT"
  },
  "Left Shift": {
    "prefix": "ls",
    "scope": "javascript,javascriptreact",
    "body": [
      "<< "
    ],
    "description": "Left Shift"
  },
  "Right Shift": {
    "prefix": "rs",
    "scope": "javascript,javascriptreact",
    "body": [
      ">> "
    ],
    "description": "Right Shift"
  },
  "Ternary": {
    "prefix": "ter",
    "scope": "javascript,javascriptreact",
    "body": [
      "(${1:condition} ) ? ${2:trueValue} :${3:falseValue} "
    ],
    "description": "Ternary"
  },
  // Condition
  "If Statement": {
    "prefix": "if",
    "scope": "javascript,javascriptreact",
    "body": [
      "if ( ${1:condition} ) {",
      "\t$2",
      "}"
    ],
    "description": "If Statement"
  },
  "If Else Statement": {
    "prefix": "ife",
    "scope": "javascript,javascriptreact",
    "body": [
      "if ( ${1:condition} ) {",
      "\t$2",
      "} else {",
      "\t$3",
      "}"
    ],
    "description": "If Else Statement"
  },
  // Logical Operator
  "Logical AND": {
    "prefix": "land",
    "scope": "javascript,javascriptreact",
    "body": [
      "&& "
    ],
    "description": "Logical AND"
  },
  "Logical OR": {
    "prefix": "lor",
    "scope": "javascript,javascriptreact",
    "body": [
      "|| "
    ],
    "description": "Logical OR"
  },
  "Logical NOT": {
    "prefix": "lnot",
    "scope": "javascript,javascriptreact",
    "body": [
      "! "
    ],
    "description": "Logical NOT"
  },
  "Logical Nullish Coalescing": {
    "prefix": "lnull",
    "scope": "javascript,javascriptreact",
    "body": [
      "?? "
    ],
    "description": "Logical Nullish Coalescing"
  },
  // Loop
  "While Statement": {
    "prefix": "while",
    "scope": "javascript,javascriptreact",
    "body": [
      "while ( ${1:condition}) {",
      "\t$2",
      "}"
    ],
    "description": "While Statement"
  },
  "Do While Statement": {
    "prefix": "dowhile",
    "scope": "javascript,javascriptreact",
    "body": [
      "do {",
      "\t$2",
      "} while ( ${1:condition} );"
    ],
    "description": "Do While Statement"
  },
  "For Statement": {
    "prefix": "for",
    "scope": "javascript,javascriptreact",
    "body": [
      "for (let ${1:i} = ${2:0}; $1 < ${3:n}; $1++) {",
      "\t$4",
      "}"
    ],
    "description": "For Statement"
  },
  "For Reverse Statement": {
    "prefix": "forr",
    "scope": "javascript,javascriptreact",
    "body": [
      "for (let ${1:i} = ${2:n-1}; $1 >= ${3:0}; $1--) {",
      "\t$4",
      "}"
    ],
    "description": "For Reverse Statement"
  },
  "For In Statement": {
    "prefix": "forin",
    "scope": "javascript,javascriptreact",
    "body": [
      "for (const ${1:key} in ${2:Object}) {",
      "\t$3",
      "}"
    ],
    "description": "For In Statement"
  },
  "For Of Statement": {
    "prefix": "forof",
    "scope": "javascript,javascriptreact",
    "body": [
      "for (const ${1:element} of ${2:Array}) {",
      "\t$3",
      "}"
    ],
    "description": "For of Statement"
  },
  "For Entries": {
    "prefix": "foren",
    "scope": "javascript,javascriptreact",
    "body": [
      "for (const [${1:key}, ${2:value}] of Object.entries(${3:obj})) {",
      "\t$4",
      "}"
    ],
    "description": "For of Statement"
  },
  // Switch
  "Switch Statement": {
    "prefix": "switch",
    "scope": "javascript,javascriptreact",
    "body": [
      "switch( ${1:condition} ) {",
      "\tcase ${2:value} :",
      "\t\t$3",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t$4",
      "}"
    ],
    "description": "Switch Statement"
  },
  // Function
  "Anonymous Arrow Function": {
    "prefix": "aaf",
    "scope": "javascript,javascriptreact",
    "body": [
      "(${1:parameters}) => {",
      "\t$2",
      "}"
    ],
    "description": "Anonymous Arrow Function"
  },
  "Async Anonymous Arrow Function": {
    "prefix": "aaaf",
    "scope": "javascript,javascriptreact",
    "body": [
      "async (${1:parameters}) => {",
      "\t$2",
      "}"
    ],
    "description": "Async Anonymous Arrow Function"
  },
  "Map": {
    "prefix": "map",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.map((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "Map"
  },
  "Find": {
    "prefix": "find",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.find((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "Find"
  },
  "Filter": {
    "prefix": "filter",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.filter((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "Filter"
  },
  "Sort": {
    "prefix": "sort",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.sort((a, b) => a - b)"
    ],
    "description": "Sort"
  },
  "For Each": {
    "prefix": "foreach",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.forEach((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "forEach"
  },
  "Includes": {
    "prefix": "includes",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.includes(${2:value})"
    ],
    "description": "Includes"
  },
  "Some": {
    "prefix": "some",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.some((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "Some"
  },
  "Every": {
    "prefix": "every",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.every((${2:item}) => {",
      "\t$3",
      "})"
    ],
    "description": "Every"
  },
  "Slice": {
    "prefix": "slice",
    "scope": "javascript,javascriptreact",
    "body": [
      "${1:arr}.slice(${2:start},${3:end})"
    ],
    "description": "Slice"
  },
  "Console log": {
    "prefix": "clg",
    "scope": "javascript,javascriptreact",
    "body": [
      "console.log($1)"
    ],
    "description": "Console log"
  },
  "Set Timeout": {
    "prefix": "settimeout",
    "scope": "javascript,javascriptreact",
    "body": [
      "setTimeout(() => {",
      "\t$2",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout"
  },
  // try catch
  "Try Catch": {
    "prefix": "tryc",
    "scope": "javascript,javascriptreact",
    "body": [
      "try {",
      "\t$1",
      "} catch (error) {",
      "\tconsole.log(error);",
      "}"
    ],
    "description": "Try Catch"
  }
  //
}
